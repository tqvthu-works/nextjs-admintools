generator client {
  provider = "prisma-client-js"
  output   = "./generated/client-admin"
}

datasource db {
  provider = "postgresql"
  url      = env("ADMIN_DATABASE_URL")
}

model adonis_schema {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  batch          Int
  migration_time DateTime? @default(now()) @db.Timestamptz(6)
}

model adonis_schema_versions {
  version Int @id
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model google_accounts {
  id            Int       @id @default(autoincrement())
  uid           String    @db.VarChar(255)
  project_id    String?   @db.VarChar(255)
  email         String?   @db.VarChar(255)
  watch_history Json?     @default("{\"historyId\": null, \"expiration\": null}")
  json          Json?     @default("{}")
  type          String
  expires_at    DateTime? @db.Timestamptz(6)
  created_at    DateTime  @db.Timestamptz(6)
  updated_at    DateTime  @db.Timestamptz(6)

  @@unique([uid, project_id, type], map: "google_accounts_uid_project_id_type_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shopify_apps {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  short_name       String             @db.VarChar(100)
  slug             String             @unique(map: "shopify_apps_slug_unique") @db.VarChar(100)
  keywords         Json               @default("[]")
  email            String             @db.VarChar(255)
  request_url      String?            @db.VarChar(255)
  request_method   String?            @default("get") @db.VarChar(10)
  request_header   Json?              @default("{}")
  request_payload  Json?              @default("{}")
  webhook_url      String?            @db.VarChar(255)
  status           Boolean            @default(true)
  created_at       DateTime?          @db.Timestamptz(6)
  updated_at       DateTime?          @db.Timestamptz(6)
  shopify_reviews  shopify_reviews[]
  shopify_shop_app shopify_shop_app[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shopify_reviews {
  id            Int           @id @default(autoincrement())
  shop_id       BigInt
  app_id        Int
  author_name   String        @db.VarChar(255)
  rating        Int
  label         String        @default("new") @db.VarChar(50)
  message       String
  reply_message String?
  source        String        @default("email") @db.VarChar(50)
  review_url    String?       @db.VarChar(255)
  reviewed_at   DateTime      @db.Timestamptz(6)
  created_at    DateTime?     @db.Timestamptz(6)
  updated_at    DateTime?     @db.Timestamptz(6)
  shopify_apps  shopify_apps  @relation(fields: [app_id], references: [id], onDelete: Cascade, map: "shopify_reviews_app_id_foreign")
  shopify_shops shopify_shops @relation(fields: [shop_id], references: [shop_id], onDelete: Cascade, map: "shopify_reviews_shop_id_foreign")

  @@unique([shop_id, app_id, reviewed_at], map: "shopify_reviews_shop_id_app_id_reviewed_at_unique")
  @@index([shop_id, app_id, source, rating], map: "shopify_reviews_shop_id_app_id_source_rating_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shopify_shop_app {
  id            Int            @id @default(autoincrement())
  shop_id       BigInt?
  app_id        Int?
  app_plan      String?        @db.VarChar(100)
  access_token  String?        @db.VarChar(255)
  installed_at  DateTime?      @db.Timestamptz(6)
  metadata      Json?          @default("{}")
  status        Boolean        @default(true)
  shopify_apps  shopify_apps?  @relation(fields: [app_id], references: [id], onDelete: Cascade, map: "shopify_shop_app_app_id_foreign")
  shopify_shops shopify_shops? @relation(fields: [shop_id], references: [shop_id], onDelete: Cascade, map: "shopify_shop_app_shop_id_foreign")

  @@index([shop_id, app_id, status], map: "shopify_shop_app_shop_id_app_id_status_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shopify_shops {
  id               Int                @id @default(autoincrement())
  shop_id          BigInt             @unique(map: "shopify_shops_shop_id_unique")
  name             String             @db.VarChar(255)
  email            String?            @db.VarChar(100)
  domain           String?            @db.VarChar(255)
  shopify_domain   String?            @db.VarChar(255)
  shopify_plan     String?            @db.VarChar(100)
  phone            String?            @db.VarChar(100)
  country          String?            @db.VarChar(100)
  timezone         String?            @db.VarChar(100)
  created_at       DateTime?          @db.Timestamptz(6)
  updated_at       DateTime?          @db.Timestamptz(6)
  shopify_reviews  shopify_reviews[]
  shopify_shop_app shopify_shop_app[]

  @@unique([name, shopify_domain], map: "shopify_shops_name_shopify_domain_unique")
  @@index([shop_id, name, shopify_domain], map: "shopify_shops_shop_id_name_shopify_domain_index")
}

model user_activities {
  id          Int       @id @default(autoincrement())
  user_id     Int
  session_id  String    @db.VarChar(255)
  ip_address  String?   @db.VarChar(45)
  action      String    @db.VarChar(255)
  description String?
  metadata    Json?     @default("{}")
  created_at  DateTime? @db.Timestamptz(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_activities_user_id_foreign")

  @@index([user_id, session_id, action, created_at], map: "user_activities_user_id_session_id_action_created_at_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_sessions {
  id             String    @id @unique(map: "user_sessions_id_unique") @db.VarChar(255)
  user_id        Int
  session_token  String?   @unique(map: "user_sessions_session_token_unique") @db.VarChar(255)
  ip_address     String    @db.VarChar(45)
  user_agent     String    @db.VarChar(255)
  metadata       Json      @default("{}")
  last_active_at DateTime  @db.Timestamptz(6)
  created_at     DateTime? @db.Timestamptz(6)
  updated_at     DateTime? @db.Timestamptz(6)
  users          users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_sessions_user_id_foreign")

  @@index([user_id, session_token, last_active_at], map: "user_sessions_user_id_session_token_last_active_at_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                        Int               @id @default(autoincrement())
  name                      String?           @db.VarChar(255)
  firstname                 String?           @db.VarChar(255)
  lastname                  String?           @db.VarChar(255)
  avatar_url                String?           @db.VarChar(255)
  email                     String            @unique(map: "users_email_unique") @db.VarChar(255)
  username                  String?           @unique(map: "users_username_unique") @db.VarChar(50)
  role                      Int               @default(3)
  password                  String            @db.VarChar(180)
  remember_me_token         String?           @db.VarChar(255)
  oauth_id                  String?           @db.VarChar(255)
  oauth_provider            String?           @db.VarChar(255)
  access_token              String?           @db.VarChar(255)
  is_oauth_verified         Boolean?          @default(false)
  two_factor_secret         String?           @db.VarChar(255)
  two_factor_recovery_codes String?
  two_factor_confirmed_at   DateTime?         @db.Timestamptz(6)
  status                    Boolean?          @default(true)
  created_at                DateTime          @db.Timestamptz(6)
  updated_at                DateTime          @db.Timestamptz(6)
  user_activities           user_activities[]
  user_sessions             user_sessions[]
}
